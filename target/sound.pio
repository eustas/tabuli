.program sound

; Outer loop: pull 2 items and serve
; Inner loop: interleave 1 bit from each item and set pins
; Processing is isochronous: every 7 ticks 2 bits are sent
; Thus an outer loop takes 32*7 = 224 ticks
; FIFO is TX-joined; full FIFO is 4x2 items - i.e. contains enough data for
; 224*4=896 ticks
; All SMs are synchronous; SMs in different PIOs are stared serially; to make
; all SMs across PIOs synchronous, the first started PIO has to wait for few
; ticks

public entry_point0: ; start of program for PIO0
    nop [1]          ; TODO: adjust stalling
public entry_point1: ; start of program for PIO1
.wrap_target         ; Outer loop start
    pull noblock     ; 0 /  7 ; take 1-st item
    mov x, osr       ; 1      ; move it to scratch
    pull noblock     ; 2      ; take 2-nd item
again:               ; Inner loop start
    out isr, 1       ; 3 / 10 ; take a bit from 1-st item into ISR
    in x, 1          ; 4      ; take a bit from 2-nd item into ISR
    mov pins, isr    ; 5      ; send bits
    jmp !osre sync   ; 6      ;
.wrap                ; if all 32x2 bits sent, goto reload
sync:
    jmp again  [2]   ; 7      ; have more data in buffers - wait and repeat
